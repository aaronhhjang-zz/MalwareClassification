var glob = require("glob"),
  path = require("path");

const nameOfOut = "simplified";
const outputFormat = ".json";
const genericPathToReportJson = "../report/**/*.json"; // EDIT THIS PATH BEFORE USING

let fileCount = 0;
report = [];
glob.sync(genericPathToReportJson).forEach(function (file) {
  const fs = require("fs");
  const data = require(path.resolve(file));
  let fileNum = file.slice(10, 12); // HARDCODED: EDIT BEFORE USING w.r.t. genericPathToReportJson

  report.push({ score: data.info.score });

  for (i = 0; i < data.signatures.length; i++) {
    report.push({
      description: data.signatures[i].description,
      severity: data.signatures[i].severity,
    });
  }
  var json = JSON.stringify(report);

  // Overwrites pre-existing "simplifiedx.json"
  fs.writeFile(nameOfOut + fileNum + outputFormat, json, function (err) {
    if (err) throw err;
  });

  console.log(
    "Finished parsing " + fileCount++ + " " + nameOfOut + fileNum + outputFormat
  );
});


//-----------------------------everything above to be commented out (line 6 prevents me from doing a multi-line comment i believe)--------------------------------------------


var glob = require("glob"),
  path = require("path");

const nameOfOut = "simplified";
const outputFormat = ".json";
const genericPathToReportJson = "analyses/**/reports/*.json";

let fileCount = 0;
report = [];
glob.sync(genericPathToReportJson).forEach(function (file) {
  const fs = require("fs");
  const data = require(path.resolve(file));
  let fileNum = file.slice(9, 11);

  report.push({ score: data.info.score });

  for (i = 0; i < data.signatures.length; i++) {
    report.push({
      description: data.signatures[i].description,
      severity: data.signatures[i].severity,
    });
  }
  var json = JSON.stringify(report);

  // Overwrites pre-existing "simplifiedx.json"
  fs.writeFile(nameOfOut + fileNum + outputFormat, json, function (err) {
    if (err) throw err;
  });

  console.log(
    "Finished parsing " + fileCount++ + " " + nameOfOut + fileNum + outputFormat
  );
});
