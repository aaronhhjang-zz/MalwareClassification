import re

index_map = [0, 8, 15, 17, 21, 30, 31, 33, 40, 86, 126, 128, 174, 185, 236, 240, 442]

def main():
    exit = False
    while(not exit):

        print("Malware Classification ... \n")
    
        is_score_valid = False
        while(not is_score_valid):
            user_input_score = input("Please input the estimate score between 0 and 10: ")

            # If user pressed x to quit
            user_input_score = user_input_score.strip()
            if user_input_score == ('x'):
                is_features_valid = True
                exit = True
                break            

            is_score_valid = input_validation_score(user_input_score)

        if exit: 
            break
        
        signatures = get_used_signatures()

        i = 0
        for signature in signatures:
            print(str(i) + " : " + signature)
            i += 1
        print("x: Terminate")
        
        print("\n")

        is_features_valid = False
        while(not is_features_valid):
            user_input_features = input("Select the malware signatures from the list above separated by ',' (Ex: 1,2,5): ")

            # If user pressed x to quit
            user_input_features = user_input_features.strip()
            if user_input_features == ('x'):
                is_features_valid = True
                exit = True
                break

            # very basic input check, should be improved
            is_features_valid = input_validation_features(user_input_features) 

        if exit:
            break

        # Take the input and convert to array
        '''
        >>> text = 'a,b,c'
        >>> text = text.split(',')
        >>> text
            [ 'a', 'b', 'c' ]
        '''
        selected_indexes = user_input_features.split(',') 

        df_indexes = indexes_to_df_indexes(selected_indexes)
        print("DEBUG: " + str(df_indexes)) # TODO remove

        # TODO: Write a function that takes df_indexes and constructs the 'inputs' datafram that is to be passed into
        # the model. The index in df_indexes should be 1, while the rest are 0
    
    print("Exiting malware classification ...")

def constains_num_comma(strg, search=re.compile(r'[^0-9,]').search):
    return not bool(search(strg))

def input_validation_score(score):
    is_valid = False
    try:
        score = float(score)
        if(score > 0 and score < 10):
            is_valid = True
        else:
            print("Score has to be between 0-10. Try again!")
    except:
        print("Invalid score input. Try again!")
    finally:
        return is_valid

def input_validation_features(features):
    is_valid = False
    try:
        if not constains_num_comma(features):
            raise Exception("Can only contain numbers and ,")
        else:
            is_valid = True
    except:
        print("Invalid input. Try again!")
    finally:
        return is_valid

def indexes_to_df_indexes(indexes):
    df_indexes = []
    
    for index in indexes:
        df_indexes.append(index_map[int(index)])
        
    return df_indexes


def get_used_signatures():
    # temp return statement
    return ['0','1','2'] 

    # get from signatures_descriptions_onlyUsed.csv all signatures into an array
    # return that array
    pass

if __name__ == "__main__":
    main()
