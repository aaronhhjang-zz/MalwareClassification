'''
    A: Takes the simplyfiedReports in "/simplifiedReports/simplified####-<malwareFamilyName>-<malwareName>.json"
    generated by the script in "/scripts/SimplifyJsonReport.js" 

    B: Takes all signatures possible generated by "scripts/GenerateSignatures.js" and builds a feature list (get_all_features())

    C: Construct a table (2d array)
        a) get_file_features takes a *.json file and extracts only the signature.description component
        b) For the row constructed in B, fill in the column for each malware file.
            i)  1 = this malware has this feature
            ii) 0 = this malware does not have this feature

    D: From the Table constructed in C, transpose it to have the data in proper form that we can input to the model.
'''

import glob
import os

from pandas import read_csv


signatures_path = r".\signature-descriptions.csv"
path_to_json = r".\simplifiedReports\\"
signature_csv_file_name = "signature_descriptions_all.csv"
only_used_sig_csv_file_name = "signature_descriptions_onlyUsed.csv"


def get_all_features():
    file_read = open(signature_csv_file_name, "r")
    content = file_read.read()
    features = content.split(";")
    file_read.close()
    return features


def check_if_string_in_file(file_name, string_to_search):
    """ Check if any line in the file contains given string """
    # Open the file in read only mode
    with open(file_name, 'r') as read_obj:
        # Read all lines in the file one by one
        for line in read_obj:
            # For each line, check if line contains the string
            if string_to_search in line:
                return True
    return False


FEATURES = get_all_features()


def get_file_features(jsonFile):
    feature_list = []
    features = FEATURES
    index = 0
    for feature in features:
        if check_if_string_in_file(jsonFile, feature):
            feature_list.append(1)
        else:
            feature_list.append(0)
        index += 1
    return feature_list


# read all json files and check for features
json_pattern = os.path.join(path_to_json, '*.json')
file_list = glob.glob(json_pattern)
featureMatrix = []  # an empty list to store the data frames
for file in file_list:
    featureMatrix.append(get_file_features(file))

transposedFeatureMatrix = [[featureMatrix[j][i] for j in range(len(featureMatrix))] for i in range(len(featureMatrix[0]))]

